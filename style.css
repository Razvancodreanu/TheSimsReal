const subNevoi=[ {
    id: "food", target: 3
}

,
{
id: "water", target: 2
}

,
{
id: "sleep", target: 8
}

,
{
id: "sport", target: 1
}

,
{
id: "steps", target: 10000
}

];

const relatiiIndiv=[ {

    id: "mama",
    impact: {
        emotionala: 100,
            practica: 50,
            superficiala: 25,
            cearta: "scade"
    }
}

,
{

id: "tata",
impact: {
    emotionala: 100,
        practica: 50,
        superficiala: 25,
        cearta: "scade"
}
}

,
{

id: "prieteni",
impact: {
    emotionala: 100,
        practica: 50,
        superficiala: 25,
        cearta: "scade"
}
}

,
{

id: "extinsa",
impact: {
    emotionala: 100,
        practica: 50,
        superficiala: 25,
        cearta: "scade"
}
}

];

const bars=["nevoi",
"relatii",
"cariera"];

function updateBars() {
    let totalNevoi=0;

    subNevoi.forEach(nevoie=> {
            const input=document.getElementById(nevoie.id + "Input");
            const bar=document.getElementById(nevoie.id);
            const val=parseFloat(input.value);

            if ( !isNaN(val)) {
                const percent=Math.min(100, Math.round((val / nevoie.target) * 100));
                bar.value=percent;
                updatePercent(nevoie.id, percent);
                localStorage.setItem(nevoie.id, percent);
                saveHistory(nevoie.id, percent);
                input.value="";
            }

            totalNevoi +=parseInt(bar.value);
        });

    const scorNevoi=Math.round(totalNevoi / subNevoi.length);
    document.getElementById("nevoi").value=scorNevoi;
    updatePercent("nevoi", scorNevoi);
    localStorage.setItem("nevoi", scorNevoi);
    saveHistory("nevoi", scorNevoi);

    let totalRelatii=0;

    relatiiIndiv.forEach(pers=> {
            const input=document.getElementById(pers.id + "Input");
            const tip=document.getElementById(pers.id + "Tip");
            const bar=document.getElementById(pers.id);
            const val=parseInt(input.value);
            const tipVal=tip.value;
            const impact=pers.impact[tipVal];

            if ( !isNaN(val) && val > 0) {
                let current=parseInt(bar.value);
                let newValue;

                if (impact==="scade") {
                    newValue=Math.max(-100, Math.round(current * 0.5));
                }

                else {
                    const totalImpact=Math.min(impact * val, 100);
                    newValue=Math.min(100, current + totalImpact);
                }

                bar.value=newValue;
                updatePercent(pers.id, newValue);
                localStorage.setItem(pers.id, newValue);
                saveHistory(pers.id, newValue);
                input.value="";
            }

            totalRelatii +=parseInt(bar.value);
        });

    const scorRelatii=Math.round(totalRelatii / relatiiIndiv.length);
    document.getElementById("relatii").value=scorRelatii;
    updatePercent("relatii", scorRelatii);
    localStorage.setItem("relatii", scorRelatii);
    saveHistory("relatii", scorRelatii);

    const carieraInput=document.getElementById("carieraInput");
    const carieraBar=document.getElementById("cariera");
    const change=parseInt(carieraInput.value);

    if ( !isNaN(change)) {
        let newValue=Math.min(100, Math.max(0, parseInt(carieraBar.value) + change));
        carieraBar.value=newValue;
        updatePercent("cariera", newValue);
        localStorage.setItem("cariera", newValue);
        saveHistory("cariera", newValue);
        carieraInput.value="";
    }

    localStorage.setItem("lastUpdate", new Date().toISOString().split("T")[0]);
    showSuggestions();
    document.getElementById("progressChart").remove();
    const newCanvas=document.createElement("canvas");
    newCanvas.id="progressChart";
    newCanvas.style.marginTop="20px";
    document.body.appendChild(newCanvas);
    updateChart();
}

function updatePercent(id, value) {
    const span=document.getElementById(id + "Percent");
    if ( !span) return;
    span.textContent=value+"%";
    span.className="percent";

    if (value < 30) {
        span.classList.add("red");
    }

    else if (value < 60) {
        span.classList.add("yellow");
    }

    else {
        span.classList.add("blue");
    }
}

function loadProgress() {

    [...subNevoi.map(n=> n.id),
    ...relatiiIndiv.map(r=> r.id),
    ...bars].forEach(bar=> {
            const saved=localStorage.getItem(bar);

            if (saved !==null) {
                document.getElementById(bar).value=parseInt(saved);
                updatePercent(bar, parseInt(saved));
            }
        });
    checkDailyDecay();
    updateChart();
    showSuggestions();
}

function checkDailyDecay() {
    const today=new Date().toISOString().split("T")[0];
    const lastUpdate=localStorage.getItem("lastUpdate") || today;

    if (lastUpdate !==today) {

        [...subNevoi.map(n=> n.id),
        ...bars].forEach(bar=> {
                const progress=document.getElementById(bar);
                let newValue=Math.max(0, progress.value - 10);
                progress.value=newValue;
                updatePercent(bar, newValue);
                localStorage.setItem(bar, newValue);
                saveHistory(bar, newValue);
            });

        relatiiIndiv.forEach(pers=> {
                const bar=document.getElementById(pers.id);
                let newValue=Math.max(-100, bar.value - 5);
                bar.value=newValue;
                updatePercent(pers.id, newValue);
                localStorage.setItem(pers.id, newValue);
                saveHistory(pers.id, newValue);
            });

        localStorage.setItem("lastUpdate", today);
    }
}

function saveHistory(bar, value) {
    const today=new Date().toISOString().split("T")[0];
    let history=JSON.parse(localStorage.getItem(bar + "_history") || "{}");
    history[today]=value;
    localStorage.setItem(bar + "_history", JSON.stringify(history));
}

function updateChart() {
    const ctx=document.getElementById("progressChart").getContext("2d");
    const dates=[];

    const data= {}

    ;

    [...subNevoi.map(n=> n.id),
    ...relatiiIndiv.map(r=> r.id),
    ...bars].forEach(bar=> data[bar]=[]);

    for (let i=6; i >=0; i--) {
        const date=new Date();
        date.setDate(date.getDate() - i);
        dates.push(date.toISOString().split("T")[0]);
    }

    [...subNevoi.map(n=> n.id),
    ...relatiiIndiv.map(r=> r.id),
    ...bars].forEach(bar=> {
            const history=JSON.parse(localStorage.getItem(bar + "_history") || "{}");

            dates.forEach(date=> {
                    data[bar].push(history[date] || 0);
                });
        });

    new Chart(ctx, {

        type: "line",
        data: {

            labels: dates,
            datasets: Object.keys(data).map(bar=> ({
                    label: bar.charAt(0).toUpperCase() + bar.slice(1),
                    data: data[bar],
                    borderColor: randomColor(),
                    backgroundColor: "rgba(0,0,0,0.1)",
                    fill: true
                }))
    }

    ,
    options: {

        responsive: true,
        scales: {
            y: {
                beginAtZero: true,
                min: -100,
                max: 100
            }
        }
    }
});
}

function randomColor() {
    const colors=["#ff6384",
    "#36a2eb",
    "#4bc0c0",
    "#9966ff",
    "#ff9f40"];
    return colors[Math.floor(Math.random() * colors.length)];
}

function showSuggestions() {
    const suggestions=[];

    subNevoi.forEach(n=> {
            const val=parseInt(document.getElementById(n.id).value);

            if (val < 50) {
                if (n.id==="food") suggestions.push("🍽️ Mănâncă o masă sănătoasă!");
                if (n.id==="water") suggestions.push("💧 Bea mai multă apă!");
                if (n.id==="sleep") suggestions.push("😴 Dormi mai mult!");
                if (n.id==="sport") suggestions.push("🏃 Fă puțină mișcare!");
                if (n.id==="steps") suggestions.push("👣 Ieși la o plimbare!");
            }
        });

    const relatiiVal=parseInt(document.getElementById("relatii").value);
    const carieraVal=parseInt(document.getElementById("cariera").value);

    if (relatiiVal < 50) suggestions.push("💬 Relații jos: sună un prieten!");
    if (carieraVal < 50) suggestions.push("💼 Carieră jos: fă un pas mic azi!");

    const suggestionDiv=document.getElementById("suggestions");
    suggestionDiv.textContent=suggestions.length>0 ? suggestions.join(" ") : "✅ Totul e echilibrat!";
}

window.onload=()=> {
    loadProgress();
}

;